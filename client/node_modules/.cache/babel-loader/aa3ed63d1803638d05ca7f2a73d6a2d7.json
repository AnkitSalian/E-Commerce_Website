{"ast":null,"code":"var _jsxFileName = \"C:\\\\Ankit\\\\React\\\\crwn-clothing\\\\src\\\\components\\\\signin\\\\signin.component.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.action';\nimport './signin.styles.scss';\n\nclass SignIn extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = async event => {\n      event.preventDefault();\n      const _this$state = this.state,\n            email = _this$state.email,\n            password = _this$state.password;\n      const emailSignInStart = this.props.emailSignInStart;\n      emailSignInStart(email, password);\n    };\n\n    this.handleChange = event => {\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.state = {\n      email: '',\n      password: ''\n    };\n  }\n\n  render() {\n    const googleSignInStart = this.props.googleSignInStart;\n    return React.createElement(\"div\", {\n      className: \"sign-in\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"I already have an account\"), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"Sign in with your email and password\"), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(FormInput, {\n      name: \"email\",\n      type: \"email\",\n      label: \"Email\",\n      handleChange: this.handleChange,\n      value: this.state.email,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }), React.createElement(FormInput, {\n      name: \"password\",\n      type: \"password\",\n      label: \"Password\",\n      handleChange: this.handleChange,\n      value: this.state.password,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(CustomButton, {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"SIGN IN\"), React.createElement(CustomButton, {\n      type: \"button\",\n      onClick: googleSignInStart,\n      isGoogleSignIn: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, ' ', \"Sign in with Google\", ' '))));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["C:\\Ankit\\React\\crwn-clothing\\src\\components\\signin\\signin.component.jsx"],"names":["React","connect","FormInput","CustomButton","googleSignInStart","emailSignInStart","SignIn","Component","constructor","props","handleSubmit","event","preventDefault","state","email","password","handleChange","target","name","value","setState","render","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport FormInput from '../form-input/form-input.component';\r\nimport CustomButton from '../custom-button/custom-button.component';\r\n\r\nimport {googleSignInStart, emailSignInStart} from '../../redux/user/user.action';\r\n\r\nimport './signin.styles.scss';\r\n\r\nclass SignIn extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            email:'',\r\n            password:''\r\n        }\r\n    }\r\n\r\n    handleSubmit = async event => {\r\n        event.preventDefault();\r\n        const {email, password} = this.state;\r\n        const {emailSignInStart} = this.props;\r\n\r\n        emailSignInStart(email, password);\r\n        \r\n    }\r\n\r\n    handleChange = event => {\r\n        const {name, value} = event.target;\r\n        this.setState({[name]:value});\r\n    }\r\n\r\n    render(){\r\n        const {googleSignInStart} = this.props;\r\n        return(\r\n            <div className=\"sign-in\">\r\n                <h2>I already have an account</h2>\r\n                <span>Sign in with your email and password</span>\r\n\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <FormInput name=\"email\" type=\"email\" label=\"Email\"  handleChange={this.handleChange} value={this.state.email} required />\r\n                    <FormInput name=\"password\" type=\"password\" label=\"Password\" handleChange={this.handleChange} value={this.state.password} required />\r\n                    \r\n                    <div className=\"buttons\">\r\n                        <CustomButton type=\"submit\">SIGN IN</CustomButton>\r\n                        <CustomButton type=\"button\" onClick={googleSignInStart} isGoogleSignIn>{' '}Sign in with Google{' '}</CustomButton>\r\n                    </div>\r\n                    \r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    googleSignInStart: () => dispatch(googleSignInStart()),\r\n    emailSignInStart: (email, password) => dispatch(emailSignInStart({email, password}))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(SignIn);"]},"metadata":{},"sourceType":"module"}