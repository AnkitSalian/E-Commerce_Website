{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport { firestore, convertCollectionSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.action';\nimport ShopActionTypes from './shop.types';\nexport function* fetchCollectionAsync() {\n  yield console.log('I am fired');\n  const collectionRef = firestore.collection('collections'); // collectionRef.get().then(snapshot =>{\n  //     const collectionMap = convertCollectionSnapshotToMap(snapshot);\n  //     dispatch(fetchCollectionsSuccess(collectionMap));\n  // }).catch(error => dispatch(fetchCollectionsFailure(error.message)))\n}\nexport function* fetchCollectionStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionAsync);\n}","map":{"version":3,"sources":["C:\\Ankit\\React\\crwn-clothing\\src\\redux\\shop\\shop.sagas.js"],"names":["takeEvery","firestore","convertCollectionSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","ShopActionTypes","fetchCollectionAsync","console","log","collectionRef","collection","fetchCollectionStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,oBAAxB;AAEA,SAAQC,SAAR,EAAmBC,8BAAnB,QAAwD,+BAAxD;AAEA,SAAQC,uBAAR,EAAiCC,uBAAjC,QAA+D,eAA/D;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,oBAAV,GAAgC;AACnC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AACA,QAAMC,aAAa,GAAGR,SAAS,CAACS,UAAV,CAAqB,aAArB,CAAtB,CAFmC,CAInC;AACA;AACA;AAEA;AAEH;AAED,OAAO,UAAUC,oBAAV,GAAgC;AACnC,QAAMX,SAAS,CACXK,eAAe,CAACO,uBADL,EAEXN,oBAFW,CAAf;AAIH","sourcesContent":["import {takeEvery} from 'redux-saga/effects';\r\n\r\nimport {firestore, convertCollectionSnapshotToMap} from '../../firebase/firebase.utils';\r\n\r\nimport {fetchCollectionsSuccess, fetchCollectionsFailure} from './shop.action';\r\n\r\nimport ShopActionTypes from './shop.types';\r\n\r\nexport function* fetchCollectionAsync(){\r\n    yield console.log('I am fired');\r\n    const collectionRef = firestore.collection('collections');\r\n\r\n    // collectionRef.get().then(snapshot =>{\r\n    //     const collectionMap = convertCollectionSnapshotToMap(snapshot);\r\n    //     dispatch(fetchCollectionsSuccess(collectionMap));\r\n           \r\n    // }).catch(error => dispatch(fetchCollectionsFailure(error.message)))\r\n        \r\n}\r\n\r\nexport function* fetchCollectionStart(){\r\n    yield takeEvery(\r\n        ShopActionTypes.FETCH_COLLECTIONS_START,\r\n        fetchCollectionAsync\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}